/// <reference types="react" />
import React from 'react';
import * as styled_components from 'styled-components';
import * as framer_motion from 'framer-motion';

interface TestComponentProps {
    text?: string;
}
declare const TestComponent: React.FC<TestComponentProps>;

interface ButtonProps {
    label?: string;
    onClick?: () => void;
}
declare const Button: (props: ButtonProps) => JSX.Element;

declare const constants: {
    radii: {
        small: string;
        regular: string;
        large: string;
        xlarge: string;
        circle: string;
    };
    typography: {
        font: {
            primary: string;
            secondary: string;
        };
        size: {
            xsmall: string;
            small: string;
            regular: string;
            large: string;
            xlarge: string;
            xxlarge: string;
            xxxlarge: string;
        };
        weight: {
            light: number;
            regular: number;
            bold: number;
            weight200: number;
            weight300: number;
            weight400: number;
            weight500: number;
            weight600: number;
            weight700: number;
            weight800: number;
        };
        lineHeight: {
            small: string;
            regular: string;
            large: string;
        };
    };
    spaces: {
        xxsmall: string;
        xsmall: string;
        small: string;
        regular: string;
        large: string;
        xlarge: string;
        xxlarge: string;
        xxxlarge: string;
    };
};

interface ContainerProps {
    width?: string;
    minWidth?: string;
    maxWidth?: string;
    height?: string;
    minHeight?: string;
    maxHeight?: string;
    position?: string;
    top?: string;
    right?: string;
    bottom?: string;
    left?: string;
    zIndex?: string;
    margin?: string;
    marginTop?: string;
    marginRight?: string;
    marginBottom?: string;
    marginLeft?: string;
    marginInline?: string;
    marginBlock?: string;
    padding?: string;
    paddingTop?: string;
    paddingRight?: string;
    paddingBottom?: string;
    paddingLeft?: string;
    paddingInline?: string;
    paddingBlock?: string;
    display?: string;
    flexDirection?: string;
    alignItems?: string;
    justifyContent?: string;
    flexWrap?: string;
    flex?: string;
    flexGrow?: string;
    flexShrink?: string;
    flexBasis?: string;
    justifySelf?: string;
    alignSelf?: string;
    order?: string;
    gap?: string;
    overflow?: string;
    overflowX?: string;
    overflowY?: string;
    gridTemplateColumns?: string;
    gridTemplateRows?: string;
    gridTemplateAreas?: string;
    gridAutoColumns?: string;
    gridAutoRows?: string;
    gridAutoFlow?: string;
    grid?: string;
    gridRow?: string;
    gridColumn?: string;
    gridArea?: string;
    gridRowStart?: string;
    gridRowEnd?: string;
    gridColumnStart?: string;
    gridColumnEnd?: string;
    gridRowGap?: string;
    gridColumnGap?: string;
    gridGap?: string;
    background?: string;
    backgroundColor?: string | ((props: any) => any);
    backgroundImage?: string;
    backgroundSize?: string;
    backgroundPosition?: string;
    backgroundRepeat?: string;
    backgroundAttachment?: string;
    backgroundClip?: string;
    backgroundOrigin?: string;
    backgroundBlendMode?: string;
    border?: string;
    borderRadius?: string;
    borderImage?: string;
    borderImageSource?: string;
    borderImageSlice?: string;
    borderImageWidth?: string;
    borderImageOutset?: string;
    borderImageRepeat?: string;
    borderTop?: string;
    borderRight?: string;
    borderBottom?: string;
    borderLeft?: string;
    borderTopColor?: string;
    borderRightColor?: string;
    borderBottomColor?: string;
    borderLeftColor?: string;
    boxShadow?: string;
    dropShadow?: string;
    textShadow?: string;
    color?: string;
    font?: string;
    fontFamily?: string;
    fontSize?: string;
    fontStyle?: string;
    fontVariant?: string;
    fontWeight?: string;
    fontStretch?: string;
    lineHeight?: string;
    letterSpacing?: string;
    textAlign?: string;
    textDecoration?: string;
    textTransform?: string;
    textIndent?: string;
    wordSpacing?: string;
    writingMode?: string;
    verticalAlign?: string;
    cursor?: string;
    opacity?: string;
    aspectRatio?: string;
    whiteSpace?: string;
    wordBreak?: string;
    cssTransition?: string;
    cssAnimation?: string;
    cssAnimationName?: string;
    cssAnimationDuration?: string;
    cssAnimationTimingFunction?: string;
    cssAnimationDelay?: string;
    cssAnimationIterationCount?: string;
    cssAnimationDirection?: string;
    cssAnimationFillMode?: string;
    filter?: string;
    backdropFilter?: string;
    clipPath?: string;
    mask?: string;
    scrollSnapType?: string;
    scrollSnapAlign?: string;
    scrollSnapStop?: string;
    scrollBehavior?: string;
    scrollBarWidth?: string;
    scrollBarColor?: string;
    scrollBarTrackColor?: string;
    scrollBarThumbColor?: string;
}

declare const Container: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const FlexContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const ColumnContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const RowContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const GridContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const CenterAlignedColumnContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const FlexStartCenterAlignedColumnContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const FlexStartColumnContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const OverflowFlexStartCenterAlignedColumnContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const CenterAlignedRowContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const FlexStartCenterAlignedRowContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const FlexEndCenterAlignedRowContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const WrappedFlexStartCenterAlignedColumnContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const OverflowFlexStartCenterAlignedRowContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;
declare const SpaceBetweenRowContainer: styled_components.StyledComponent<"div", styled_components.DefaultTheme, ContainerProps, never>;

interface TextProps {
    color?: string;
    fontSize?: string;
    fontWeight?: string;
    fontFamily?: string;
    fontStyle?: string;
    lineHeight?: string;
    letterSpacing?: string;
    textAlign?: string;
    textDecoration?: string;
    textTransform?: string;
    textIndent?: string;
    wordSpacing?: string;
    verticalAlign?: string;
    whiteSpace?: string;
    wordBreak?: string;
    writingMode?: string;
    cursor?: string;
    opacity?: string;
    aspectRatio?: string;
    webkitLineClamp?: string;
    webkitBoxOrient?: string;
    webkitBoxDirection?: string;
    margin?: string;
    marginTop?: string;
    marginRight?: string;
    marginBottom?: string;
    marginLeft?: string;
    marginInline?: string;
    marginInlineStart?: string;
    padding?: string;
    paddingTop?: string;
    paddingRight?: string;
    paddingBottom?: string;
    paddingLeft?: string;
    paddingInline?: string;
    paddingInlineStart?: string;
}

declare const Text: styled_components.StyledComponent<"h1", styled_components.DefaultTheme, TextProps, never>;

declare const AnimatedContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedFlexContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedColumnContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedRowContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedGridContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedCenterAlignedColumnContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedFlexStartCenterAlignedColumnContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedFlexStartColumnContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedOverflowFlexStartCenterAlignedColumnContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedCenterAlignedRowContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedFlexStartCenterAlignedRowContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedFlexEndCenterAlignedRowContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedWrappedFlexStartCenterAlignedColumnContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedOverflowFlexStartCenterAlignedRowContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;
declare const AnimatedSpaceBetweenRowContainer: styled_components.StyledComponent<framer_motion.ForwardRefComponent<HTMLDivElement, framer_motion.HTMLMotionProps<"div">>, styled_components.DefaultTheme, ContainerProps, never>;

declare const BennyThemeProvider: (props: {
    children: React.ReactNode;
}) => JSX.Element;

export { AnimatedCenterAlignedColumnContainer, AnimatedCenterAlignedRowContainer, AnimatedColumnContainer, AnimatedContainer, AnimatedFlexContainer, AnimatedFlexEndCenterAlignedRowContainer, AnimatedFlexStartCenterAlignedColumnContainer, AnimatedFlexStartCenterAlignedRowContainer, AnimatedFlexStartColumnContainer, AnimatedGridContainer, AnimatedOverflowFlexStartCenterAlignedColumnContainer, AnimatedOverflowFlexStartCenterAlignedRowContainer, AnimatedRowContainer, AnimatedSpaceBetweenRowContainer, AnimatedWrappedFlexStartCenterAlignedColumnContainer, BennyThemeProvider, Button, CenterAlignedColumnContainer, CenterAlignedRowContainer, ColumnContainer, Container, FlexContainer, FlexEndCenterAlignedRowContainer, FlexStartCenterAlignedColumnContainer, FlexStartCenterAlignedRowContainer, FlexStartColumnContainer, GridContainer, OverflowFlexStartCenterAlignedColumnContainer, OverflowFlexStartCenterAlignedRowContainer, RowContainer, SpaceBetweenRowContainer, TestComponent, Text, WrappedFlexStartCenterAlignedColumnContainer, constants };
